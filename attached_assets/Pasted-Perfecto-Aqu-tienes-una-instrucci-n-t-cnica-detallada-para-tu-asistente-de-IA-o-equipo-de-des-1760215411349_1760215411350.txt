Perfecto. Aqu√≠ tienes una **instrucci√≥n t√©cnica detallada** para tu asistente de IA (o equipo de desarrollo) sobre c√≥mo **expandir el sistema de niveles a 10**, aumentar la **complejidad narrativa y ling√º√≠stica**, ajustar el **sistema de progreso/puntuaci√≥n**, y registrar las **historias jugadas y disponibles** para cada usuario, todo en coherencia con el backend IA y el frontend interactivo.

---

# üß≠ Fase 5 ‚Äî Expansi√≥n de Niveles, Complejidad Adaptativa y Sistema de Progreso

## 1) Objetivo general

Instruir al motor de IA para:

* Escalar el sistema de **niveles de aprendizaje** de 5 ‚Üí **10 niveles**.
* Generar historias m√°s **largas, complejas y ricas ling√º√≠sticamente** seg√∫n nivel.
* Aumentar la **dificultad gramatical, sem√°ntica y ortogr√°fica** en los juegos.
* Actualizar los sistemas de **progreso, puntos y logros**.
* Guardar y listar **historias jugadas** para cada usuario (revisi√≥n o repetici√≥n).

---

## 2) Nueva estructura de niveles

| Nivel | Nombre          | Extensi√≥n      | Caracter√≠sticas gramaticales / ling√º√≠sticas                                | Objetivos de aprendizaje                                      |
| :---- | :-------------- | :------------- | :------------------------------------------------------------------------- | :------------------------------------------------------------ |
| 1     | Inicial         | 50‚Äì80 palabras | Oraciones simples (SVO), vocabulario concreto, sin conjugaciones complejas | Reconocer sujeto-verbo-objeto                                 |
| 2     | B√°sico          | 80‚Äì100         | Adjetivos, art√≠culos definidos/indefinidos, tiempos presentes simples      | Usar art√≠culos y concordancia b√°sica                          |
| 3     | Intermedio      | 100‚Äì130        | Conectores simples (y, pero, porque), tiempos presente/pasado              | Construir ideas con conectores                                |
| 4     | Avanzado        | 130‚Äì160        | Verbos irregulares comunes, plurales, concordancia de g√©nero               | Reforzar ortograf√≠a b√°sica                                    |
| 5     | Experto         | 150‚Äì200        | Subordinadas breves, pronombres, tiempos compuestos                        | Estructuras subordinadas b√°sicas                              |
| 6     | Intermedio Alto | 200‚Äì250        | Nexos complejos, tiempos perfectos, adverbios de modo y tiempo             | Coherencia narrativa temporal                                 |
| 7     | Avanzado Alto   | 250‚Äì300        | Oraciones compuestas, uso de preposiciones precisas                        | Dominio de cohesi√≥n y conectores                              |
| 8     | Profesional     | 300‚Äì350        | Modismos, met√°foras simples, estilo descriptivo                            | Uso expresivo y creativo del lenguaje                         |
| 9     | Literario       | 350‚Äì400        | Voz pasiva, discurso indirecto, variaciones de estilo                      | An√°lisis y redacci√≥n avanzada                                 |
| 10    | Maestro         | 400‚Äì500+       | Subordinadas m√∫ltiples, tiempos mixtos, vocabulario abstracto              | Producci√≥n libre con estilo y correcci√≥n ortogr√°fica completa |

---

## 3) Indicaciones para el sistema de IA (Strands / generador de historias)

**Prompt base extendido:**

```
Eres un dise√±ador de actividades pedag√≥gicas en espa√±ol para ni√±os y j√≥venes con hipoacusia.

Debes generar historias interactivas seg√∫n el nivel solicitado (1‚Äì10).

Cada nivel aumenta:
- La longitud del texto (ver tabla).
- La complejidad gramatical (art√≠culos, tiempos verbales, conectores, subordinadas, modismos).
- El vocabulario (de concreto a abstracto).
- El desaf√≠o sem√°ntico (interpretaci√≥n y sentido figurado).
- La correcci√≥n ortogr√°fica y uso de tildes.

Incluye en la respuesta:
{
  "story": {
    "level": <1-10>,
    "title": "...",
    "text": "...",
    "wordCount": <int>,
    "targets": ["vocabulario", "tiempo verbal", "estructura gramatical"],
    "theme": "...",
    "assets": [ ... ]
  },
  "gameSpec": {
    "complexityIndex": <1-10>,
    "gameType": "...",
    "rules": "...",
    "exercise": {
      "type": "...",
      "difficulty": <1-10>,
      "focus": ["ortograf√≠a", "sem√°ntica", "gram√°tica"]
    }
  }
}
```

**Notas:**

* La IA debe calibrar la *complejidad narrativa y ling√º√≠stica* seg√∫n el nivel.
* A partir del nivel 6, incluir conectores complejos, pronombres relativos, y tiempos compuestos.
* A partir del nivel 8, permitir met√°foras, expresiones idiom√°ticas y variaciones de estilo.
* Los juegos asociados deben reflejar esta progresi√≥n (ver secci√≥n siguiente).

---

## 4) Escalado de dificultad en juegos IA-driven

| Nivel | Tipo de juego principal                               | Dificultad / Ejemplo           |
| :---- | :---------------------------------------------------- | :----------------------------- |
| 1‚Äì2   | Arrastra la palabra correcta / Une palabra-imagen     | Reconocer vocabulario b√°sico   |
| 3‚Äì4   | Ordena la oraci√≥n                                     | Sintaxis simple                |
| 5‚Äì6   | Completa con verbo correcto / Acentos                 | Gram√°tica y ortograf√≠a         |
| 7‚Äì8   | Corrige el error / reescribe                          | Gram√°tica avanzada             |
| 9‚Äì10  | Redacta una frase alternativa / elige el mejor estilo | Producci√≥n y revisi√≥n de texto |

**Indicaciones para el flujo Strands `generate_story_with_game`:**

* A√±adir par√°metro `difficultyScale: 1‚Äì10`.
* Ajustar generaci√≥n de juegos y feedback con esa escala.
* Incorporar nuevos tipos de ejercicio (`rewrite_sentence`, `find_error`, `contextual_choice`).

---

## 5) Sistema de progreso y puntos

**Objetivo:** motivar constancia y medir mejora gramatical.

### Reglas

* Al terminar una historia:

  * +50 puntos por lectura completa.
  * +20 puntos por cada ejercicio correcto.
  * +10 puntos extra si completa sin errores.
  * +Bonus de consistencia por sesiones consecutivas.

**Modelo de datos (DynamoDB)**

```json
{
  "userId": "usr_001",
  "storyId": "sto_102",
  "level": 7,
  "pointsEarned": 120,
  "accuracy": 0.85,
  "timeSpent": 340,
  "completedAt": "2025-10-12T15:43Z",
  "progressSummary": {
    "grammar": "improved",
    "spelling": "needs_attention",
    "semantics": "good"
  }
}
```

**Visualizaci√≥n en frontend:**

* Barra de progreso por nivel.
* Badges: ‚ÄúExplorador‚Äù, ‚ÄúEscritor‚Äù, ‚ÄúNarrador‚Äù, etc.
* Ranking semanal (solo para modo parental opcional).

---

## 6) Registro y consulta de historias disponibles

**Requerimientos funcionales:**

1. Cada historia generada se almacena en `UserStories`:

   * `userId + storyId` (PK)
   * `status`: `completed|in-progress|available`
   * `level`, `theme`, `timestamp`
2. El usuario puede reabrir historias completadas en la secci√≥n ‚ÄúMis historias‚Äù.
3. Backend debe ofrecer:

   * `GET /v1/stories/user/{userId}` ‚Üí lista de historias con progreso.
   * `GET /v1/stories/{storyId}` ‚Üí contenido completo si pertenece al usuario.
   * `PATCH /v1/progress` ‚Üí actualiza estado (ej. ‚Äúcompleted‚Äù).

**Ejemplo JSON (frontend):**

```json
[
  {
    "storyId": "sto_203",
    "title": "La ciudad de las palabras perdidas",
    "level": 8,
    "status": "completed",
    "points": 160,
    "accuracy": 0.92,
    "playedAt": "2025-10-10"
  },
  {
    "storyId": "sto_204",
    "title": "El tren de las ideas",
    "level": 9,
    "status": "available"
  }
]
```

---

## 7) Indicaciones al sistema Strands (backend IA)

**Flow actualizado: `generate_story_with_game`**

* Nuevo par√°metro: `level` (1‚Äì10)
* Incluir mapeo de complejidad ‚Üí palabras y dificultad de juego
* Generar campos:

  * `complexityIndex`
  * `gameSpec.difficulty`
  * `targets[]`

**Flow `evaluate_answer`**

* Debe ponderar la puntuaci√≥n seg√∫n `level`.
* Incluir feedback gramatical y sem√°ntico proporcional a la edad/nivel.
* Registrar resultados en `Progress` table.

**Flow `progress_post`**

* Consolidar progreso acumulado (`totalPoints`, `storiesCompleted`, `averageAccuracy`).

---

## 8) Ejemplo de prompt adaptativo para IA generadora de historias

```
ROLE: Dise√±ador de historias educativas en espa√±ol para j√≥venes con hipoacusia.

TASK: Generar una historia y un juego educativo adaptados al nivel {level}.
A mayor nivel, m√°s palabras, complejidad gramatical, riqueza sem√°ntica y correcci√≥n ortogr√°fica.

CONSTRAINTS:
- Nivel {level} (1‚Äì10)
- Palabras: {range seg√∫n nivel}
- Estructuras: {ver tabla de niveles}
- Tema: {theme}
- Juego: ajustado al nivel de complejidad (ej. ordenar, corregir, reescribir)
OUTPUT: JSON con story + gameSpec + targets.
```

---

## 9) Recomendaciones t√©cnicas de implementaci√≥n

* **Frontend**:

  * A√±adir selector de nivel 1‚Äì10 con descripci√≥n din√°mica.
  * Mostrar progreso acumulado, puntos y badges.
  * ‚ÄúMis historias‚Äù ‚Üí lista con filtros (nivel, tema, estado).

* **Backend (Lambda/Agents)**:

  * Validar `level` en 1‚Äì10.
  * Actualizar tablas: `Stories`, `Progress`, `UserStories`.
  * Ajustar l√≠mites diarios seg√∫n plan Free/Premium.

* **Base de datos**:

  * √çndices GSI: `userId-level`, `userId-status`.
  * TTL opcional para historias inactivas.

---

## 10) Checklist de actualizaci√≥n

* [ ] Ampliar tabla de niveles a 10 en configuraci√≥n global.
* [ ] Modificar prompt base y `StoryGenerateRequest` (a√±adir `level` 1‚Äì10).
* [ ] Actualizar `GameSpec` con `difficulty` y `complexityIndex`.
* [ ] Implementar registro de progreso y puntos acumulativos.
* [ ] Crear endpoint `GET /v1/stories/user/{id}`.
* [ ] Mostrar secci√≥n ‚ÄúMis historias‚Äù.
* [ ] Ajustar UI con descripciones de niveles.
* [ ] Testear IA con variaciones de `level` 1‚Äì10 (sanity check: longitud y vocabulario).

---